version: '3.5'

services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    labels:
        com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - $PWD/nginx/conf/etc/nginx/conf.d:/etc/nginx/conf.d
      - $PWD/nginx/certs:/etc/nginx/certs:ro
      - $PWD/nginx/etc/nginx/vhost.d:/etc/nginx/vhost.d
      - $PWD/nginx/usr/share/nginx/html:/usr/share/nginx/html
  
  letsencrypt-nginx-proxy-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-letsencrypt
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - $PWD/nginx/conf/etc/nginx/conf.d:/etc/nginx/conf.d
      - $PWD/nginx/certs:/etc/nginx/certs
      - $PWD/nginx/etc/nginx/vhost.d:/etc/nginx/vhost.d
      - $PWD/nginx/usr/share/nginx/html:/usr/share/nginx/html

  portainer:
    container_name: portainer
    hostname: portainer
    image: portainer/portainer:latest
    ports:
      - 9000
    volumes:
      - $PWD/portainer/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_PORTAINER}
      - LETSENCRYPT_HOST=${VIRTUAL_HOST_PORTAINER}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    depends_on:
      - nginx-proxy

  nexus-server:
    container_name: nexus-server
    hostname: nexus-server
    image: sonatype/nexus3:${NEXUS_VERSION}
    ports:
      - 8081
#      - 8082
#      - 8083
    volumes:
      - $PWD/nexus/data:/nexus-data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_NEXUS}
      - LETSENCRYPT_HOST=${VIRTUAL_HOST_NEXUS}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    depends_on:
      - nginx-proxy

  git-server:
    container_name: git-server
    hostname: git-server
    image: gitea/gitea:${GIT_VERSION}
    ports:
      - 3000
      - 22
    volumes:
      - $PWD/gitea/data:/data
      # edit the domain in side this file first
#      - $PWD/gitea/app.ini:/data/gitea/conf/app.ini
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_GIT}
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=${VIRTUAL_HOST_GIT}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}

    depends_on:
      - nginx-proxy

  drone-server:
    container_name: drone-server
    hostname: drone-server
    image: drone/drone:${DRONE_VERSION}
    ports:
      - 8000
      - 9000
    volumes:
      - ./droneio/drone:/var/lib/drone/
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - nginx-proxy
      - git-server
      - nexus-server
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_DRONE}
      - LETSENCRYPT_HOST=${VIRTUAL_HOST_DRONE}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - VIRTUAL_PORT=8000
      - DRONE_DEBUG=true
      - DRONE_HOST=http://${VIRTUAL_HOST_DRONE}
      - DRONE_OPEN=true
      - DRONE_SECRET=ok
      - DRONE_PLUGIN_PULL=true
      - DRONE_GOGS=true
      - DRONE_GOGS_URL=http://${VIRTUAL_HOST_GIT}
      - DRONE_GOGS_PRIVATE_MODE=true
      - DRONE_GOGS_SKIP_VERIFY=false
#
  drone-agent-01:
    container_name: drone-agent-01
    hostname: drone-agent-01
    image: drone/agent:${DRONE_VERSION}
    privileged: true
    command: agent
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=drone-server:9000
#      - DRONE_SERVER=${VIRTUAL_HOST_DRONE}:9000
      - DRONE_SECRET=ok

  drone-agent-02:
    container_name: drone-agent-02
    hostname: drone-agent-02
    image: drone/agent:${DRONE_VERSION}
    privileged: true
    command: agent
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=drone-server:9000
#      - DRONE_SERVER=${DRONE_DOCKER_EXTERNAL_IP}:9000
      - DRONE_SECRET=ok

  drone-agent-03:
    container_name: drone-agent-03
    hostname: drone-agent-03
    image: drone/agent:${DRONE_VERSION}
    privileged: true
    command: agent
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=drone-server:9000
#      - DRONE_SERVER=${DRONE_DOCKER_EXTERNAL_IP}:9000
      - DRONE_SECRET=ok

  drone-agent-04:
    container_name: drone-agent-04
    hostname: drone-agent-04
    image: drone/agent:${DRONE_VERSION}
    privileged: true
    command: agent
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=drone-server:9000
#      - DRONE_SERVER=${DRONE_DOCKER_EXTERNAL_IP}:9000
      - DRONE_SECRET=ok

#  drone-agent-05:
#    container_name: drone-agent-05
#    hostname: drone-agent-05
#    image: drone/agent:${DRONE_VERSION}
#    privileged: true
#    command: agent
#    depends_on:
#      - drone-server
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      - DRONE_SERVER=drone-server:9000
##      - DRONE_SERVER=${DRONE_DOCKER_EXTERNAL_IP}:9000
#      - DRONE_SECRET=ok
#
#  drone-agent-06:
#    container_name: drone-agent-06
#    hostname: drone-agent-06
#    image: drone/agent:${DRONE_VERSION}
#    privileged: true
#    command: agent
#    depends_on:
#      - drone-server
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      - DRONE_SERVER=drone-server:9000
##      - DRONE_SERVER=${DRONE_DOCKER_EXTERNAL_IP}:9000
#      - DRONE_SECRET=ok
#
#  drone-agent-07:
#    container_name: drone-agent-07
#    hostname: drone-agent-07
#    image: drone/agent:${DRONE_VERSION}
#    privileged: true
#    command: agent
#    depends_on:
#      - drone-server
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      - DRONE_SERVER=drone-server:9000
##      - DRONE_SERVER=${DRONE_DOCKER_EXTERNAL_IP}:9000
#      - DRONE_SECRET=ok
#
#  drone-agent-08:
#    container_name: drone-agent-08
#    hostname: drone-agent-08
#    image: drone/agent:${DRONE_VERSION}
#    privileged: true
#    command: agent
#    depends_on:
#      - drone-server
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      - DRONE_SERVER=drone-server:9000
##      - DRONE_SERVER=${DRONE_DOCKER_EXTERNAL_IP}:9000
#      - DRONE_SECRET=ok

  selenoid-server:
    container_name: selenoid-server
    hostname: selenoid-server
    image: aerokube/selenoid:${SELENOID_VER}
    ports:
      - 4444
    volumes:
      - $PWD/selenoid/browsers.json:/etc/selenoid/browsers.json
      - $PWD/selenoid/video/:/opt/selenoid/video/
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_SELENOID}
      - LETSENCRYPT_HOST=${VIRTUAL_HOST_SELENOID}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    depends_on:
      - nginx-proxy
    command: [--conf,             "/etc/selenoid/browsers.json",
              --video-output-dir, "/opt/selenoid/video",
              --limit ,           "10" ,
              --mem,              "128m"]

  selenoid-ui:
    container_name: selenoid-ui
    hostname: selenoid-ui
    image: aerokube/selenoid-ui:${SELENOID_VER}
    ports:
      - 8080  #port 8080 is used by FnProject
    links:
      - selenoid-server
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_SELENOID_UI}
      - LETSENCRYPT_HOST=${VIRTUAL_HOST_SELENOID_UI}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    depends_on:
      - selenoid-server
      - nginx-proxy
    command: [--selenoid-uri, "http://selenoid-server:4444"]


  openproject:
    image: openproject/community
    container_name: openproject
    hostname: openproject
    ports:
      - 80
    volumes:
      - $PWD/openproject/pgdata:/var/lib/postgresql/9.6/main
      - $PWD/openproject/static:/var/db/openproject
      - $PWD/openproject/logs:/var/log/supervisor
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_OPENPROJECT}
      - LETSENCRYPT_HOST=${VIRTUAL_HOST_OPENPROJECT}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - SECRET_KEY_BASE=secret
    depends_on:
    - nginx-proxy


  youtrack:
      image: jetbrains/youtrack:${YOUTRACK_VERSION}
      container_name: youtrack
      hostname: youtrack
      ports:
          - 8080
      volumes:
          - $PWD/youtrack/data:/opt/youtrack/data
          - $PWD/youtrack/conf:/opt/youtrack/conf
          - $PWD/youtrack/logs:/opt/youtrack/logs
          - $PWD/youtrack/backups:/opt/youtrack/backups
      environment:
        - VIRTUAL_HOST=${VIRTUAL_HOST_ISSUES}
        - LETSENCRYPT_HOST=${VIRTUAL_HOST_ISSUES}
        - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      depends_on:
        - nginx-proxy

  upsource:
      image: jetbrains/upsource:${UPSOURCE_VERSION}
      container_name: upsource
      hostname: upsource
      ports:
          - 8080
      volumes:
          - $PWD/upsource/data:/opt/upsource/data
          - $PWD/upsource/conf:/opt/upsource/conf
          - $PWD/upsource/logs:/opt/upsource/logs
          - $PWD/upsource/backups:/opt/upsource/backups
      environment:
        - VIRTUAL_HOST=${VIRTUAL_HOST_REVIEW}
        - LETSENCRYPT_HOST=${VIRTUAL_HOST_REVIEW}
        - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      depends_on:
        - nginx-proxy

  gitlab:
      image: gitlab/gitlab-ce:latest
      #restart: always
      container_name: gitlab
      hostname: gitlab
      environment:
        - VIRTUAL_HOST=${VIRTUAL_HOST_GITLAB}
        - LETSENCRYPT_HOST=${VIRTUAL_HOST_GITLAB}
        - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
        - GITLAB_OMNIBUS_CONFIG=${GITLAB_OMI_CONFIG}
             #        GITLAB_OMNIBUS_CONFIG: |
             #external_url 'http://${VIRTUAL_HOST_GITLAB}'
          # Add any other gitlab.rb configuration here, each on its own line
      ports:
        - 80
          #        - 443
        - '2222:22'
      volumes:
        - $PWD/gitlab/config:/etc/gitlab
        - $PWD/gitlab/logs:/var/log/gitlab
        - $PWD/gitlab/data:/var/opt/gitlab

  gitlab-runner-01:
    image: gitlab/gitlab-runner:latest
    container_name: gitlab-runner-01
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/gitlab-runner/01/config:/etc/gitlab-runner

  gitlab-runner-02:
    image: gitlab/gitlab-runner:latest
    container_name: gitlab-runner-02
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/gitlab-runner/02/config:/etc/gitlab-runner

  gitlab-runner-03:
    image: gitlab/gitlab-runner:latest
    container_name: gitlab-runner-03
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD/gitlab-runner/03/config:/etc/gitlab-runner

  minio:
    image: minio/minio
    container_name: minio
    hostname: minio
    ports:
      - 9000
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_S3}
      - LETSENCRYPT_HOST=${VIRTUAL_HOST_S3}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESSKEY}
      - MINIO_SECRET_KEY=${MINIO_SECRETKEY}
    volumes:
      - $PWD/minio/data/:/data
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - nginx-proxy
    command: server /data


  fnserver:
    image: fnproject/fnserver
    container_name: fnserver
    hostname: fnserver
    ports:
      - 8080
      - 2375
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_FN}
      - LETSENCRYPT_HOST=${VIRTUAL_HOST_FN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - VIRTUAL_PORT=8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - nginx-proxy

  fnserver-ui:

    image: fnproject/ui
    container_name: fnserver-ui
    hostname: fnserver-ui
    ports:
      - "4000"
    depends_on:
      - nginx-proxy
      - fnserver
    links:
      - fnserver
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_FN_UI}
      - LETSENCRYPT_HOST=${VIRTUAL_HOST_FN_UI}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - FN_API_URL=http://fnserver:8080

